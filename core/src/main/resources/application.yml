server:
  port: 9000
cors:
  domain:
    uri: http://localhost:4200

#okta:
#  oauth2:
#    issuer: https://{yourOktaDomain}/oauth2/default
#    client-id: {yourClientId}
#    client-secret: {yourClientSecret}

# The following is standard Spring Security OAuth2 configuration.
okta:
  oauth2:
    issuer: ${OKTA_OAUTH2_ISSUER}
    client-id: ${OKTA_OAUTH2_CLIENT_ID}
    client-secret: ${OKTA_OAUTH2_CLIENT_SECRET}
spring:
  application:
    name: atlas-service
  security:
    oauth2:
      client:
        provider:
          okta:
            issuer-uri: ${OKTA_OAUTH2_ISSUER}
        registration:
          okta:
            client-id: ${OKTA_OAUTH2_CLIENT_ID}
            client-secret: ${OKTA_OAUTH2_CLIENT_SECRET}
      resourceserver:
        jwt:
          issuer-uri: ${OKTA_OAUTH2_ISSUER}
  r2dbc:
    # url: r2dbc:postgresql://ec2-34-251-118-151.eu-west-1.compute.amazonaws.com:5432/d8g1sr68qsfuqi
    # password: bd481e7581e264f62651c238e1ab6f7e44da59eab74024ad88bf7aa6693cef5b
    # username: qpsdonwfrqqzcw
    url: r2dbc:postgresql://localhost:5432/atlas_dev
    password: root
    username: atlasdev
    pool:
      enabled: true
      initialSize: 10
      maxIdleTime: 1m
      maxSize: 30
  flyway:
    url: jdbc:postgresql://localhost:5432/atlas_dev
    password: root
    user: atlasdev


logging:
  level:
    .: INFO
    org.springframework:
      data:
        r2dbc: DEBUG
    core: DEBUG
  pattern:
    console: '%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} -> %msg%n'
    file: '%d %p %c{1.} [%t] -> %m%n'
  file:
    name: logs/atlas.log